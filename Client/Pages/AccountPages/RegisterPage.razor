@page "/identity/account/register"
@using Client.Pages.OtherPages
@using Syncfusion.Blazor.Popups
@inject SfDialogService DialogService
@layout AuthenticationLayout
<div class="container">
    <div class="row">
        <div class="col-lg-4"></div>
        <div class="col-lg-4">
            <EditForm Enhance Model="User" OnValidSubmit="HandleRegistration">
                 <DataAnnotationsValidator />
                 <div class="card bg-dark d-flex justify-content-center" style="opacity:0.5; margin-top:50%; border-radius:10px; color:white; font-weight:bold">
                     <div class="card-header text-center fs-5">Register an account</div>

                     <div class="container">
                         <div class="row">
                             <div class="col-lg-4 col-md-4 col-sm-4"></div>
                             <div class="col-lg-4 col-md-4 col-sm-4 d-flex justify-content-center">
                                 <img style="border-radius:20px" src="../images/companylogos/netcode.jpg" height="50" width="50" />
                             </div>
                             <div class="col-lg-4 col-md-4 col-sm-4"></div>
                         </div>
                     </div>

                     <div class="card-body">
                         <div class="form-group">
                             <label class="form-label">Fullname</label>
                             <InputText @bind-Value="User.Fullname" class="form-control"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Email</label>
                             <InputText @bind-Value="User.Email" class="form-control"></InputText>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Password</label>
                             <input type="password" @bind="User.Password" class="form-control"></input>
                         </div>
                         <div class="form-group mt-3">
                             <label class="form-label">Confirm Password</label>
                             <input type="password" @bind="User.ConfirmPassword" class="form-control"></input>
                         </div>
                         <div class="form-group mt-3">
                             @if (ShowLoadingButton)
                             {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                             }
                             else
                             {
                                <button class="btn btn-primary float-end" type="submit">Register</button>
                             }
                         </div>
                     </div>

                     <div class="card-footer">
                         <span class="text-center">
                             Have account already? |
                             <a class="btn-link" href="identity/account/login">Sign In</a>
                         </span>
                         <ValidationSummary />
                     </div>

                 </div>
             </EditForm>
        </div>
        <div class="col-lg-4">

         </div>
     </div>
 </div>


@code {
    public bool ShowLoadingButton { get; set; } = false;
    Register User = new();

    //로그인 했는지 확인하는 기능
    [CascadingParameter] public Task<AuthenticationState> AuthenticationState { get; set; }
    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleRegistration()
    {
        ShowLoadingButton = true;
        var result = await accountService.CreateAsync(User);
        if (result.Flag)
        {
            await DisplaDialog(result.Message, "Success");
            User = new();
        }
        else
        {
            await DisplaDialog(result.Message, "Alert");
        }
        ShowLoadingButton = false;
    }

    private async Task DisplaDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

    // 로그인 안했으면 로그인페이지로 이동
    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState).User;
        bool isUserAuthenticated = user.Identity!.IsAuthenticated;
        if (isUserAuthenticated)
            NavManager.NavigateTo("/home/dashboard");
    }
}
